name: Publish to Maven Central

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to publish (e.g., v2.1.21-0.0.1)'
        required: true
        type: string

permissions:
  contents: read
  packages: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      tag_name: ${{ steps.extract.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag }}
        fetch-depth: 0
        
    - name: Extract version from tag
      id: extract
      run: |
        TAG_NAME="${{ github.event.inputs.tag }}"
        
        # Validate tag format
        if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Tag must be in KSP format vKOTLIN_VERSION-LIB_VERSION (e.g., v2.1.21-0.0.1)"
          echo "   Input tag: ${TAG_NAME}"
          exit 1
        fi
        
        # Check if tag exists
        if ! git rev-parse --verify "refs/tags/${TAG_NAME}" >/dev/null 2>&1; then
          echo "‚ùå Error: Tag ${TAG_NAME} does not exist!"
          echo "   Please create the tag first using the Tag Release workflow."
          exit 1
        fi
        
        VERSION="${TAG_NAME#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "‚úÖ Tag: ${TAG_NAME}, Version: ${VERSION}"

  build:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag }}
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Verify version in gradle.properties
      run: |
        EXPECTED_VERSION="${{ needs.validate.outputs.version }}"
        GRADLE_VERSION=$(grep "project.version=" gradle.properties | cut -d'=' -f2)
        
        if [[ "$GRADLE_VERSION" != "$EXPECTED_VERSION" ]]; then
          echo "‚ùå Error: Version mismatch!"
          echo "   Expected: $EXPECTED_VERSION"
          echo "   Found in gradle.properties: $GRADLE_VERSION"
          echo "   Please ensure the tag contains the correct version updates."
          exit 1
        fi
        
        echo "‚úÖ Version verified: $GRADLE_VERSION"
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Run ktlint check
      run: ./gradlew ktlintCheck
      
    - name: Build for release
      run: ./gradlew build

  publish:
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag }}
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Upload to Maven Central Staging
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        echo "üì§ Uploading ${{ needs.validate.outputs.tag_name }} to Maven Central staging repository..."
        ./gradlew publishToMavenCentral --no-configuration-cache
        echo "‚úÖ Uploaded to staging repository successfully!"
      
    - name: Publish to GitHub Packages
      env:
        GITHUB_USERNAME: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üì¶ Publishing ${{ needs.validate.outputs.tag_name }} to GitHub Packages..."
        ./gradlew publishAllPublicationsToGithubPackagesRepository
        echo "‚úÖ Published to GitHub Packages successfully!"
        
    - name: Publication summary
      run: |
        echo "üéâ Maven Central Publication completed successfully!"
        echo ""
        echo "üì¶ Tag: ${{ needs.validate.outputs.tag_name }}"
        echo "üî¢ Version: ${{ needs.validate.outputs.version }}"
        echo ""
        echo "‚úÖ Uploaded to Maven Central staging repository"
        echo "‚úÖ Published to GitHub Packages"
        echo ""
        echo "‚ö†Ô∏è  MANUAL ACTION REQUIRED:"
        echo "   1. Go to https://oss.sonatype.org/"
        echo "   2. Login and navigate to 'Staging Repositories'"
        echo "   3. Find your repository (usually named like 'iogithubdoljae-####')"
        echo "   4. Click 'Close' and wait for validation"
        echo "   5. Click 'Release' to publish to Maven Central"
        echo ""
        echo "üîó Links:"
        echo "   - Sonatype Staging: https://oss.sonatype.org/#stagingRepositories"
        echo "   - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag_name }}"
        echo "   - Maven Central: https://central.sonatype.com/artifact/io.github.doljae/kotlin-logging-extensions/${{ needs.validate.outputs.version }}" 