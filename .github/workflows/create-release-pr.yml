name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (KSP format: KOTLIN_VERSION-LIB_VERSION, e.g., 2.1.21-0.0.2)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      branch_name: ${{ steps.version.outputs.branch_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set version variables
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        TAG_NAME="v${VERSION}"
        BRANCH_NAME="release/${VERSION}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        echo "Tag: ${TAG_NAME}"
        echo "Branch: ${BRANCH_NAME}"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Version must be in KSP format KOTLIN_VERSION-LIB_VERSION (e.g., 2.1.21-0.0.1)"
          echo "   Input version: ${VERSION}"
          echo "   Expected format: KOTLIN_VERSION-LIB_VERSION (e.g., 2.1.21-0.0.1)"
          exit 1
        fi
        echo "‚úÖ Version format is valid: ${VERSION}"
        
    - name: Check if tag already exists
      run: |
        TAG_NAME="${{ steps.version.outputs.tag_name }}"
        if git rev-parse --verify "refs/tags/${TAG_NAME}" >/dev/null 2>&1; then
          echo "‚ùå Error: Tag ${TAG_NAME} already exists!"
          echo "   Please use a different version number."
          exit 1
        fi
        echo "‚úÖ Tag ${TAG_NAME} does not exist, proceeding with release PR"
        
    - name: Check if release branch already exists
      run: |
        BRANCH_NAME="${{ steps.version.outputs.branch_name }}"
        if git ls-remote --heads origin "${BRANCH_NAME}" | grep -q "${BRANCH_NAME}"; then
          echo "‚ùå Error: Branch ${BRANCH_NAME} already exists!"
          echo "   Please use a different version number or delete the existing branch."
          exit 1
        fi
        echo "‚úÖ Branch ${BRANCH_NAME} does not exist, proceeding with release PR"

  test:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Run ktlint check
      run: ./gradlew ktlintCheck
      
    - name: Build artifacts
      run: ./gradlew build

  create-pr:
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create release branch
      run: |
        BRANCH_NAME="${{ needs.validate.outputs.branch_name }}"
        git checkout -b "${BRANCH_NAME}"
        echo "‚úÖ Created release branch: ${BRANCH_NAME}"
        
    - name: Extract build script versions
      id: build_versions
      run: |
        # Extract Kotlin version from build.gradle.kts
        KOTLIN_VERSION=$(grep 'kotlin("jvm") version' build.gradle.kts | sed 's/.*version "\([^"]*\)".*/\1/')
        echo "kotlin_version=${KOTLIN_VERSION}" >> $GITHUB_OUTPUT
        echo "üìç Extracted Kotlin version: ${KOTLIN_VERSION}"
        
        # Extract KSP version from build.gradle.kts  
        KSP_VERSION=$(grep 'id("com.google.devtools.ksp") version' build.gradle.kts | sed 's/.*version "\([^"]*\)".*/\1/')
        echo "ksp_version=${KSP_VERSION}" >> $GITHUB_OUTPUT
        echo "üìç Extracted KSP version: ${KSP_VERSION}"
        
        # Extract kotlin-logging-jvm version from workload/build.gradle.kts
        KOTLIN_LOGGING_VERSION=$(grep 'io.github.oshai:kotlin-logging-jvm:' workload/build.gradle.kts | sed 's/.*kotlin-logging-jvm:\([^"]*\)".*/\1/')
        echo "kotlin_logging_version=${KOTLIN_LOGGING_VERSION}" >> $GITHUB_OUTPUT
        echo "üìç Extracted kotlin-logging-jvm version: ${KOTLIN_LOGGING_VERSION}"

    - name: Update version references
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        KOTLIN_VERSION="${{ steps.build_versions.outputs.kotlin_version }}"
        KSP_VERSION="${{ steps.build_versions.outputs.ksp_version }}"
        
        echo "üìù Updating version references:"
        echo "  - Library version: $VERSION"
        echo "  - Kotlin version: $KOTLIN_VERSION" 
        echo "  - KSP version: $KSP_VERSION"
        
        # Update README.md - Handle both semantic version (0.0.1) and KSP format (2.1.21-0.0.1)
        sed -i "s/io\.github\.doljae:kotlin-logging-extensions:[0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\.[0-9]\+\.[0-9]\+\)\?/io.github.doljae:kotlin-logging-extensions:$VERSION/g" README.md
        
        # Update build script version references in README.md
        sed -i "s/kotlin(\"jvm\") version \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/kotlin(\"jvm\") version \"$KOTLIN_VERSION\"/g" README.md
        sed -i "s/id(\"com\.google\.devtools\.ksp\") version \"[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.[0-9]\+\.[0-9]\+\"/id(\"com.google.devtools.ksp\") version \"$KSP_VERSION\"/g" README.md
        
        # Update bug_report.yml - Handle both version formats in code block and placeholders
        sed -i "s/io\.github\.doljae:kotlin-logging-extensions:[0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\.[0-9]\+\.[0-9]\+\)\?/io.github.doljae:kotlin-logging-extensions:$VERSION/g" .github/ISSUE_TEMPLATE/bug_report.yml
        sed -i "s/kotlin(\"jvm\") version \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/kotlin(\"jvm\") version \"$KOTLIN_VERSION\"/g" .github/ISSUE_TEMPLATE/bug_report.yml
        sed -i "s/id(\"com\.google\.devtools\.ksp\") version \"[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.[0-9]\+\.[0-9]\+\"/id(\"com.google.devtools.ksp\") version \"$KSP_VERSION\"/g" .github/ISSUE_TEMPLATE/bug_report.yml
        
        # Update issue template placeholders with specific versions
        echo "üîÑ Updating issue template placeholders..."
        
        # Update each template file individually for better control
        for template_file in .github/ISSUE_TEMPLATE/*.yml; do
          if [[ -f "$template_file" ]]; then
            echo "  üìù Updating $(basename "$template_file")..."
            
            # Library Version placeholders (e.g., 0.0.1 or 2.1.21-0.0.1)
            sed -i "s/placeholder: \"e\.g\., [0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\.[0-9]\+\.[0-9]\+\)\?\"/placeholder: \"e.g., $VERSION\"/g" "$template_file"
            
            # Kotlin Version placeholders (e.g., 2.1.21 or 2.1.20)
            sed -i "s/placeholder: \"e\.g\., [0-9]\+\.[0-9]\+\.[0-9]\+\"$/placeholder: \"e.g., $KOTLIN_VERSION\"/g" "$template_file"
            
            # KSP Version placeholders (e.g., 2.1.21-2.0.2 or 2.1.20-2.0.1)  
            sed -i "s/placeholder: \"e\.g\., [0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.[0-9]\+\.[0-9]\+\"/placeholder: \"e.g., $KSP_VERSION\"/g" "$template_file"
          fi
        done
        
        # Update gradle.properties
        sed -i "s/project.version=.*/project.version=$VERSION/" gradle.properties
        
        # Log what was updated
        echo "üìã Updated files:"
        echo "  - README.md (dependency examples + build script versions)"
        echo "  - .github/ISSUE_TEMPLATE/bug_report.yml (code blocks + placeholders)" 
        echo "  - .github/ISSUE_TEMPLATE/*.yml (version-specific placeholders)"
        echo "  - gradle.properties (project version)"
        echo ""
        echo "üìå Version updates applied:"
        echo "  - Library Version: $VERSION"
        echo "  - Kotlin Version: $KOTLIN_VERSION (from build.gradle.kts)"
        echo "  - KSP Version: $KSP_VERSION (from build.gradle.kts)"
        echo "‚úÖ Version references updated successfully"

    - name: Commit version updates
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        KOTLIN_VERSION="${{ steps.build_versions.outputs.kotlin_version }}"
        KSP_VERSION="${{ steps.build_versions.outputs.ksp_version }}"
        
        # Configure git user
        git config user.name "Seokjae Lee"
        git config user.email "seok9211@naver.com"
        
        # Add changed files
        git add README.md gradle.properties .github/ISSUE_TEMPLATE/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ö†Ô∏è No version changes to commit - files may already be up to date"
          echo "Current gradle.properties version: $(grep 'project.version=' gradle.properties)"
          echo "Target versions: Library=$VERSION, Kotlin=$KOTLIN_VERSION, KSP=$KSP_VERSION"
          
          # Still commit to ensure the release branch has something
          echo "Creating empty commit to ensure release branch exists..."
          git commit --allow-empty -m "chore: prepare release $VERSION" \
            -m "No version changes needed - files already up to date" \
            -m "Target versions:" \
            -m "  * Library Version ‚Üí $VERSION" \
            -m "  * Kotlin Version ‚Üí $KOTLIN_VERSION" \
            -m "  * KSP Version ‚Üí $KSP_VERSION"
          echo "‚úÖ Empty commit created for release branch"
        else
          # Commit changes
          git commit -m "chore: update version references to $VERSION" \
            -m "- Update README.md dependency examples and build script versions" \
            -m "- Update issue template placeholders with build script versions:" \
            -m "  * Library Version ‚Üí $VERSION" \
            -m "  * Kotlin Version ‚Üí $KOTLIN_VERSION" \
            -m "  * KSP Version ‚Üí $KSP_VERSION" \
            -m "- Update project version in gradle.properties"
          echo "‚úÖ Version updates committed"
          
          # Show what was changed
          echo "üìã Changed files:"
          git diff --name-only HEAD~1 HEAD | sed 's/^/  - /'
        fi
        
    - name: Push release branch
      run: |
        BRANCH_NAME="${{ needs.validate.outputs.branch_name }}"
        git push origin "${BRANCH_NAME}"
        echo "‚úÖ Pushed release branch: ${BRANCH_NAME}"
        
    - name: Generate release notes for PR
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        CURRENT_VERSION="${{ needs.validate.outputs.version }}"
        
        echo "Generating release notes since ${PREVIOUS_TAG}"
        
        # Create PR description
        echo "## üöÄ Release ${{ needs.validate.outputs.tag_name }}" > pr_description.md
        echo "" >> pr_description.md
        echo "This PR prepares the release of version \`${CURRENT_VERSION}\`." >> pr_description.md
        echo "" >> pr_description.md
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # First release
          echo "### üéâ Initial Release" >> pr_description.md
          echo "" >> pr_description.md
          echo "This is the first release of kotlin-logging-extensions!" >> pr_description.md
          echo "" >> pr_description.md
          echo "**Features:**" >> pr_description.md
          echo "- Automatic logger generation for Kotlin classes using KSP" >> pr_description.md
          echo "- Zero boilerplate - just use \`log.info { }\` in any class" >> pr_description.md
          echo "- Package-aware naming with fully qualified class names" >> pr_description.md
          echo "- Seamless integration with kotlin-logging library" >> pr_description.md
          echo "" >> pr_description.md
        else
          # Regular release
          echo "### üìù Changes since ${PREVIOUS_TAG}" >> pr_description.md
          echo "" >> pr_description.md
          
          # Get commits since last tag
          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD~1 --pretty=format:"- %s (%h)" --no-merges)
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" >> pr_description.md
            echo "" >> pr_description.md
          else
            echo "- Minor improvements and updates" >> pr_description.md
            echo "" >> pr_description.md
          fi
        fi
        
        # Add version compatibility info (using extracted build script versions)
        KOTLIN_VERSION="${{ steps.build_versions.outputs.kotlin_version }}"
        KSP_VERSION="${{ steps.build_versions.outputs.ksp_version }}"
        KOTLIN_LOGGING_VERSION="${{ steps.build_versions.outputs.kotlin_logging_version }}"
        
        echo "### ‚ö° Version Compatibility" >> pr_description.md
        echo "- **Kotlin**: $KOTLIN_VERSION" >> pr_description.md
        echo "- **KSP**: $KSP_VERSION" >> pr_description.md
        echo "- **kotlin-logging**: $KOTLIN_LOGGING_VERSION+" >> pr_description.md
        echo "" >> pr_description.md
        
        # Add what will happen after merge
        echo "### üîÑ After Merge" >> pr_description.md
        echo "When this PR is merged, the following will happen automatically:" >> pr_description.md
        echo "- ‚úÖ Create git tag: \`${{ needs.validate.outputs.tag_name }}\`" >> pr_description.md
        echo "- ‚úÖ Generate GitHub Release with release notes" >> pr_description.md
        echo "- ‚úÖ Upload to Maven Central staging repository" >> pr_description.md
        echo "- ‚ö†Ô∏è Manual step: Complete publishing at https://oss.sonatype.org/" >> pr_description.md
        echo "" >> pr_description.md
        
        # Add review checklist
        echo "### ‚úÖ Review Checklist" >> pr_description.md
        echo "- [ ] Version number is correct" >> pr_description.md
        echo "- [ ] All version references are updated consistently" >> pr_description.md
        echo "- [ ] Tests are passing" >> pr_description.md
        echo "- [ ] Ready to release" >> pr_description.md
        
        # Set output for PR creation
        echo 'pr_description<<EOF' >> $GITHUB_OUTPUT
        cat pr_description.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
    - name: Create Pull Request using GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        TAG_NAME="${{ needs.validate.outputs.tag_name }}"
        BRANCH_NAME="${{ needs.validate.outputs.branch_name }}"
        
        # Save PR description to file for GitHub CLI
        cat > pr_body.md << 'EOF'
        ${{ steps.release_notes.outputs.pr_description }}
        EOF
        
        # Create PR using GitHub CLI (preserves all commits in branch)
        echo "üîÑ Creating Pull Request from branch ${BRANCH_NAME} to main..."
        PR_URL=$(gh pr create \
          --title "Release ${TAG_NAME}" \
          --body-file pr_body.md \
          --base main \
          --head "${BRANCH_NAME}" \
          --assignee doljae \
          --reviewer doljae)
        
        echo "‚úÖ Pull Request created: ${PR_URL}"
        
        # Try to add labels (may fail if labels don't exist)
        PR_NUMBER=$(basename "${PR_URL}")
        gh pr edit "${PR_NUMBER}" --add-label "release" || echo "‚ö†Ô∏è Could not add 'release' label"
        gh pr edit "${PR_NUMBER}" --add-label "version-update" || echo "‚ö†Ô∏è Could not add 'version-update' label"
        
        # Clean up temporary files
        rm -f pr_body.md pr_description.md
        
    - name: Summary
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        KOTLIN_VERSION="${{ steps.build_versions.outputs.kotlin_version }}"
        KSP_VERSION="${{ steps.build_versions.outputs.ksp_version }}"
        KOTLIN_LOGGING_VERSION="${{ steps.build_versions.outputs.kotlin_logging_version }}"
        TAG_NAME="${{ needs.validate.outputs.tag_name }}"
        BRANCH_NAME="${{ needs.validate.outputs.branch_name }}"
        
        echo "üéâ Release PR created successfully!"
        echo ""
        echo "üì¶ Library Version: $VERSION"
        echo "‚ö° Kotlin Version: $KOTLIN_VERSION"
        echo "üîß KSP Version: $KSP_VERSION"
        echo "üìö kotlin-logging Version: $KOTLIN_LOGGING_VERSION"
        echo "üè∑Ô∏è Tag: $TAG_NAME"
        echo "üåø Branch: $BRANCH_NAME"
        echo ""
        echo "üìù Updated placeholders in issue templates with actual build script versions"
        echo ""
        echo "üîó Review and merge the PR to trigger automatic release:"
        echo "   https://github.com/${{ github.repository }}/pulls"
        echo ""
        echo "‚ÑπÔ∏è After PR merge, check the auto-release workflow:"
        echo "   https://github.com/${{ github.repository }}/actions" 
