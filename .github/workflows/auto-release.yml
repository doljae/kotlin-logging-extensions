name: Auto Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
      version: ${{ steps.extract.outputs.version }}
      tag_name: ${{ steps.extract.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if this is a release commit
      id: check
      run: |
        # Check if the last commit is a version update commit
        LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        if [[ $LAST_COMMIT_MSG =~ ^chore:\ update\ version\ references\ to\ [0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is-release=true" >> $GITHUB_OUTPUT
          echo "✅ This is a release commit: $LAST_COMMIT_MSG"
        else
          echo "is-release=false" >> $GITHUB_OUTPUT
          echo "ℹ️ This is not a release commit: $LAST_COMMIT_MSG"
        fi
        
    - name: Extract version from gradle.properties
      id: extract
      if: steps.check.outputs.is-release == 'true'
      run: |
        VERSION=$(grep "project.version=" gradle.properties | cut -d'=' -f2)
        TAG_NAME="v${VERSION}"
        
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Error: Invalid version format in gradle.properties: $VERSION"
          exit 1
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "✅ Extracted version: ${VERSION}, tag: ${TAG_NAME}"

  test:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.is-release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Run ktlint check
      run: ./gradlew ktlintCheck
      
    - name: Build for release
      run: ./gradlew build

  publish:
    runs-on: ubuntu-latest
    needs: [check-release, test]
    if: needs.check-release.outputs.is-release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Upload to Maven Central Staging
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        echo "📤 Uploading ${{ needs.check-release.outputs.tag_name }} to Maven Central staging repository..."
        ./gradlew publishToMavenCentral --no-configuration-cache
        echo "✅ Uploaded to staging repository successfully!"
      
    - name: Publish to GitHub Packages
      env:
        GITHUB_USERNAME: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Publishing ${{ needs.check-release.outputs.tag_name }} to GitHub Packages..."
        ./gradlew publishAllPublicationsToGithubPackagesRepository
        echo "✅ Published to GitHub Packages successfully!"

  release:
    runs-on: ubuntu-latest
    needs: [check-release, test, publish]
    if: needs.check-release.outputs.is-release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Create and push tag
      run: |
        TAG_NAME="${{ needs.check-release.outputs.tag_name }}"
        
        # Check if tag already exists
        if git rev-parse --verify "refs/tags/${TAG_NAME}" >/dev/null 2>&1; then
          echo "⚠️ Tag ${TAG_NAME} already exists, skipping tag creation"
        else
          echo "Creating tag ${TAG_NAME}..."
          
          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
          
          # Push tag to origin
          git push origin "${TAG_NAME}"
          echo "✅ Tag ${TAG_NAME} created and pushed successfully!"
        fi
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
        CURRENT_TAG="${{ needs.check-release.outputs.tag_name }}"
        
        echo "Generating release notes from ${PREVIOUS_TAG} to ${CURRENT_TAG}"
        
        # Create release notes
        if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
          # First release or no previous tags
          echo "🎉 **Initial Release**" > release_notes.md
          echo "" >> release_notes.md
          echo "This is the first release of kotlin-logging-extensions!" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🚀 Features" >> release_notes.md
          echo "- Automatic logger generation for Kotlin classes using KSP" >> release_notes.md
          echo "- Zero boilerplate - just use \`log.info { }\` in any class" >> release_notes.md
          echo "- Package-aware naming with fully qualified class names" >> release_notes.md
          echo "- Seamless integration with kotlin-logging library" >> release_notes.md
          echo "" >> release_notes.md
        else
          # Regular release
          echo "## 🔄 Changes since ${PREVIOUS_TAG}" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag (excluding version update commits)
          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges | grep -v "^- chore: update version references")
          if [ -n "$COMMITS" ]; then
            echo "### 📝 Commits" >> release_notes.md
            echo "$COMMITS" >> release_notes.md
            echo "" >> release_notes.md
          else
            echo "### 📝 Changes" >> release_notes.md
            echo "- Minor improvements and updates" >> release_notes.md
            echo "" >> release_notes.md
          fi
        fi
        
        # Add version compatibility info
        echo "## ⚡ Version Compatibility" >> release_notes.md
        echo "- **Kotlin**: 2.1.21" >> release_notes.md
        echo "- **KSP**: 2.1.21-2.0.2" >> release_notes.md
        echo "- **kotlin-logging**: 7.0.7+" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add installation instructions
        echo "## 📦 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`kotlin" >> release_notes.md
        echo "plugins {" >> release_notes.md
        echo "    kotlin(\"jvm\") version \"2.1.21\"" >> release_notes.md
        echo "    id(\"com.google.devtools.ksp\") version \"2.1.21-2.0.2\"" >> release_notes.md
        echo "}" >> release_notes.md
        echo "" >> release_notes.md
        echo "dependencies {" >> release_notes.md
        echo "    ksp(\"io.github.doljae:kotlin-logging-extensions:${{ needs.check-release.outputs.version }}\")" >> release_notes.md
        echo "    implementation(\"io.github.doljae:kotlin-logging-extensions:${{ needs.check-release.outputs.version }}\")" >> release_notes.md
        echo "    implementation(\"io.github.oshai:kotlin-logging-jvm:7.0.7\")" >> release_notes.md
        echo "}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add publishing status
        echo "## 📦 Publishing Status" >> release_notes.md
        echo "" >> release_notes.md
        echo "✅ **Staged on Maven Central** - Ready for manual publishing" >> release_notes.md
        echo "" >> release_notes.md
        echo "To complete the Maven Central release:" >> release_notes.md
        echo "1. Go to [Sonatype Staging Repositories](https://oss.sonatype.org/#stagingRepositories)" >> release_notes.md
        echo "2. Find repository \`iogithubdoljae-####\`" >> release_notes.md
        echo "3. Click **Close** and wait for validation" >> release_notes.md
        echo "4. Click **Release** to publish to Maven Central" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add links
        echo "## 🔗 Links" >> release_notes.md
        echo "- 📚 [Documentation](https://github.com/doljae/kotlin-logging-extensions/blob/main/README.md)" >> release_notes.md
        echo "- 📦 [Maven Central (after publishing)](https://central.sonatype.com/artifact/io.github.doljae/kotlin-logging-extensions/${{ needs.check-release.outputs.version }})" >> release_notes.md
        echo "- 🔧 [Sonatype Staging](https://oss.sonatype.org/#stagingRepositories)" >> release_notes.md
        if [ -n "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "$CURRENT_TAG" ]; then
          echo "- 🔄 [Full Changelog](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${CURRENT_TAG})" >> release_notes.md
        fi
        
        # Set output for GitHub release
        echo 'release_notes<<EOF' >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check-release.outputs.tag_name }}
        name: Release ${{ needs.check-release.outputs.tag_name }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release summary
      run: |
        echo "🎉 Auto Release ${{ needs.check-release.outputs.tag_name }} completed successfully!"
        echo ""
        echo "✅ Created and pushed git tag: ${{ needs.check-release.outputs.tag_name }}"
        echo "✅ Uploaded to Maven Central staging repository"
        echo "✅ Published to GitHub Packages"
        echo "✅ Created GitHub Release with release notes"
        echo ""
        echo "🔗 Links:"
        echo "   - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-release.outputs.tag_name }}"
        echo "   - Sonatype Staging: https://oss.sonatype.org/#stagingRepositories"
        echo "   - Maven Central: https://central.sonatype.com/artifact/io.github.doljae/kotlin-logging-extensions/${{ needs.check-release.outputs.version }}"
        echo ""
        echo "⚠️  MANUAL ACTION REQUIRED:"
        echo "   Complete Maven Central publishing at https://oss.sonatype.org/" 