@file:Suppress("UnresolvedReference")

package examples

import kotlin.random.Random

/**
 * Example of a user management service demonstrating various logging scenarios.
 * Shows how the auto-generated `log` property works in a real-world service class.
 * 
 * Note: The `log` property is auto-generated by kotlin-logging-extensions at compile time.
 * You won't see it in your IDE until the project is built with KSP.
 */
class UserService {

    fun createUser(name: String, email: String): User {
        // Auto-generated log property is available here!
        log.info { "Creating new user: name='$name', email='$email'" }

        // Validate input
        if (name.isBlank()) {
            log.warn { "Attempted to create user with blank name. Email: $email" }
            throw IllegalArgumentException("User name cannot be blank")
        }

        try {
            // Simulate user creation
            val user = User(
                id = generateUserId(),
                name = name,
                email = email
            )

            log.info { "Successfully created user: ${user.id}" }
            log.debug { "User details: $user" }

            return user
        } catch (e: Exception) {
            log.error(e) { "Failed to create user: name='$name', email='$email'" }
            throw UserCreationException("Could not create user", e)
        }
    }

    fun findUser(userId: String): User? {
        log.debug { "Looking up user with ID: $userId" }

        return if (Random.nextBoolean()) {
            val user = User(userId, "Sample User", "user@example.com")
            log.info { "Found user: $userId" }
            user
        } else {
            log.warn { "User not found: $userId" }
            null
        }
    }

    fun deleteUser(userId: String) {
        log.info { "Attempting to delete user: $userId" }

        try {
            // Simulate deletion logic
            if (Random.nextBoolean()) {
                log.info { "Successfully deleted user: $userId" }
            } else {
                throw RuntimeException("Database connection failed")
            }
        } catch (e: Exception) {
            log.error(e) { "Failed to delete user: $userId" }
            throw e
        }
    }

    private fun generateUserId(): String {
        val id = "user_${Random.nextInt(1000, 9999)}"
        log.debug { "Generated user ID: $id" }
        return id
    }
}

data class User(
    val id: String,
    val name: String,
    val email: String
)

class UserCreationException(message: String, cause: Throwable) : Exception(message, cause) 