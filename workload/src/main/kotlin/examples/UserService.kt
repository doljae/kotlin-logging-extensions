@file:Suppress("UnresolvedReference")

package examples

import kotlin.random.Random

/**
 * Example of a user management service demonstrating various logging scenarios.
 * Shows how the auto-generated `log` property works in a real-world service class.
 * 
 * Note: The `log` property is auto-generated by kotlin-logging-extensions at compile time.
 * You won't see it in your IDE until the project is built with KSP.
 */
class UserService {

    fun createUser(name: String, email: String): User {
        // Auto-generated log property will be available here
        println("LOG [INFO] Creating new user: name='$name', email='$email'")

        // Validate input
        if (name.isBlank()) {
            println("LOG [WARN] Attempted to create user with blank name. Email: $email")
            throw IllegalArgumentException("User name cannot be blank")
        }

        try {
            // Simulate user creation
            val user = User(
                id = generateUserId(),
                name = name,
                email = email
            )

            println("LOG [INFO] Successfully created user: ${user.id}")
            println("LOG [DEBUG] User details: $user")

            return user
        } catch (e: Exception) {
            println("LOG [ERROR] Failed to create user: name='$name', email='$email' - ${e.message}")
            throw UserCreationException("Could not create user", e)
        }
    }

    fun findUser(userId: String): User? {
        println("LOG [DEBUG] Looking up user with ID: $userId")

        return if (Random.nextBoolean()) {
            val user = User(userId, "Sample User", "user@example.com")
            println("LOG [INFO] Found user: $userId")
            user
        } else {
            println("LOG [WARN] User not found: $userId")
            null
        }
    }

    fun deleteUser(userId: String) {
        println("LOG [INFO] Attempting to delete user: $userId")

        try {
            // Simulate deletion logic
            if (Random.nextBoolean()) {
                println("LOG [INFO] Successfully deleted user: $userId")
            } else {
                throw RuntimeException("Database connection failed")
            }
        } catch (e: Exception) {
            println("LOG [ERROR] Failed to delete user: $userId - ${e.message}")
            throw e
        }
    }

    private fun generateUserId(): String {
        val id = "user_${Random.nextInt(1000, 9999)}"
        println("LOG [DEBUG] Generated user ID: $id")
        return id
    }
}

data class User(
    val id: String,
    val name: String,
    val email: String
)

class UserCreationException(message: String, cause: Throwable) : Exception(message, cause) 